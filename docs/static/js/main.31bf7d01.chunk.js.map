{"version":3,"sources":["components/icon.js","components/switchIcon.js","components/link.js","components/linksList.js","components/copyright.js","components/techstacks.js","App.js","serviceWorker.js","index.js","images/cat.jpg","images/me.jpg"],"names":["Icon","img","className","src","alt","SwitchIcon","useState","isMeIcon","setIsMeIcon","onClick","MeImg","CatImg","Link","size","color","icon","linkUrl","linkName","href","LinksList","linkInfoArr","map","linkInfo","Copyright","TechStacks","title","icon_tail","techstack","height","library","add","fab","fas","far","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.31bf7d01.chunk.js","sourcesContent":["import React from \"react\";\nexport default function Icon({ img }) {\n   return (\n      <div className=\"icon\">\n         <div className=\"icon container\">\n            <img className=\"icon img\" src={img} alt=\"icon\" />\n         </div>\n      </div>\n   );\n}\n","import React, { useState } from \"react\";\nimport Icon from \"./icon\";\nimport CatImg from \"../images/cat.jpg\";\nimport MeImg from \"../images/me.jpg\";\n\nexport default function SwitchIcon() {\n   const [isMeIcon, setIsMeIcon] = useState(true);\n   return (\n      <div className=\"switchIcon\" onClick={() => setIsMeIcon(!isMeIcon)}>\n         {isMeIcon ? <Icon img={MeImg} /> : <Icon img={CatImg} />}\n      </div>\n   );\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nexport default function Link({ size, color, icon, linkUrl, linkName }) {\n   return (\n      <div className=\"link\">\n         <div className=\"link container\">\n            <FontAwesomeIcon size={size} color={color} icon={icon} />\n            <a href={linkUrl}>{linkName}</a>\n         </div>\n      </div>\n   );\n}\n","import React from \"react\";\nimport Link from \"./link\";\nexport default function LinksList({ linkInfoArr }) {\n   return (\n      <div className=\"linksList\">\n         {linkInfoArr.map((linkInfo) => {\n            const { size, color, icon, linkUrl, linkName } = linkInfo;\n            return (\n               <Link\n                  size={size}\n                  color={color}\n                  icon={icon}\n                  linkUrl={linkUrl}\n                  linkName={linkName}\n               />\n            );\n         })}\n      </div>\n   );\n}\n","import React from \"react\";\n\nexport default function Copyright() {\n   return (\n      <div className=\"copyright\">\n         <div className=\"container\">\n            <div className=\"text\">Â© 2022 woxjro All Rights Reserved</div>\n         </div>\n      </div>\n   );\n}\n","import React from \"react\";\nimport Link from \"./link\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function TechStacks({ linkInfoArr }) {\n   let languages = [\n      { icon: \"rust\", title: \"rust\", icon_tail: \"plain\" },\n      { icon: \"javascript\", title: \"javascript\", icon_tail: \"plain\" },\n      { icon: \"typescript\", title: \"typescript\", icon_tail: \"plain\" },\n      { icon: \"python\", title: \"python\", icon_tail: \"plain\" },\n      { icon: \"php\", title: \"php\", icon_tail: \"plain\" },\n      { icon: \"java\", title: \"java\", icon_tail: \"plain\" },\n      { icon: \"ocaml\", title: \"ocaml\", icon_tail: \"plain\" },\n      { icon: \"csharp\", title: \"csharp\", icon_tail: \"plain\" },\n   ];\n\n   let web = [\n      { icon: \"react\", title: \"react/react-native\", icon_tail: \"original\" },\n      { icon: \"redux\", title: \"redux\", icon_tail: \"original\" },\n      { icon: \"laravel\", title: \"laravel\", icon_tail: \"plain\" },\n      { icon: \"mysql\", title: \"mysql\", icon_tail: \"plain\" },\n   ];\n\n   let tools = [\n      { icon: \"vim\", title: \"vim\", icon_tail: \"original\" },\n      { icon: \"ubuntu\", title: \"ubuntu\", icon_tail: \"plain\" },\n      { icon: \"apple\", title: \"OSX\", icon_tail: \"original\" },\n      { icon: \"git\", title: \"git\", icon_tail: \"plain\" },\n      { icon: \"github\", title: \"github\", icon_tail: \"original\" },\n   ];\n\n   return (\n      <div className=\"techStackList\">\n         <div className=\"container languages\">\n            <p className=\"title\">languages</p>\n            {languages.map((techstack) => {\n               let { icon, title, icon_tail } = techstack;\n               return (\n                  <img\n                     className=\"techstack\"\n                     src={`https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${icon}/${icon}-${icon_tail}.svg`}\n                     height=\"25\"\n                  />\n               );\n            })}\n         </div>\n         <div className=\"container web\">\n            <p className=\"title\">web/App</p>\n            {web.map((techstack) => {\n               let { icon, title, icon_tail } = techstack;\n\n               return (\n                  <img\n                     className=\"techstack\"\n                     src={`https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${icon}/${icon}-${icon_tail}.svg`}\n                     height=\"25\"\n                  />\n               );\n            })}\n         </div>\n\n         <div className=\"container tools\">\n            <p className=\"title\">tools</p>\n            <div>\n               {tools.map((techstack) => {\n                  let { icon, title, icon_tail } = techstack;\n\n                  return (\n                     <img\n                        className=\"techstack\"\n                        src={`https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${icon}/${icon}-${icon_tail}.svg`}\n                        height=\"25\"\n                     />\n                  );\n               })}\n            </div>\n\n            <div>\n               <FontAwesomeIcon\n                  className={\"keyboard\"}\n                  icon=\"fa-solid fa-keyboard\"\n               />\n               <a\n                  href={\n                     \"https://www.realforce.co.jp/products/R2TLA-US-BK/US3.html\"\n                  }\n               >\n                  REALFORCE R2TLA-US3-BK\n               </a>\n            </div>\n         </div>\n      </div>\n   );\n}\n","import React from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport SwitchIcon from \"./components/switchIcon\";\nimport Link from \"./components/link\";\nimport LinksList from \"./components/linksList\";\nimport Copyright from \"./components/copyright\";\nimport TechStacks from \"./components/techstacks\";\n\nlibrary.add(fab, fas, far);\nfunction App() {\n   const linkInfoArr = [\n      {\n         size: \"lg\",\n         color: \"white\",\n         icon: [\"fab\", \"github\"],\n         linkUrl: \"https://github.com/woxjro/\",\n         linkName: \"@woxjro\",\n      },\n      {\n         size: \"lg\",\n         color: \"white\",\n         icon: [\"fab\", \"twitter\"],\n         linkUrl: \"https://twitter.com/woxjro\",\n         linkName: \"@woxjro\",\n      },\n      {\n         size: \"lg\",\n         color: \"white\",\n         icon: [\"fas\", \"university\"],\n         linkUrl: \"\",\n         linkName: \"Kyoto Univ.\",\n      },\n      {\n         size: \"lg\",\n         color: \"white\",\n         icon: [\"fas\", \"building\"],\n         linkUrl: \"http://x-point-1.net/\",\n         linkName: \"X.1\",\n\t  },\n      {\n         size: \"lg\",\n         color: \"white\",\n         icon: [\"fas\", \"building\"],\n         linkUrl: \"https://www.co-conv.jp/\",\n         linkName: \"CO-CONV\",\n      },\n   ];\n   return (\n      <div className=\"App\">\n         <SwitchIcon />\n         <LinksList linkInfoArr={linkInfoArr} />\n         <TechStacks linkInfoArr={linkInfoArr} />\n         <Copyright />\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cat.4c701c69.jpg\";","module.exports = __webpack_public_path__ + \"static/media/me.bb684d82.jpg\";"],"sourceRoot":""}